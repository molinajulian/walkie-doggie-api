const { createCompleteOwner } = require('../../utils/users');
const { createCompleteWalker } = require('../../utils/users');
const { truncateDatabase } = require('../../utils/app');
const { getResponse } = require('../../utils/app');
const { generateToken } = require('../../factories/tokens');

describe('GET /users/:id', () => {
  let successfulOwnerResponse = {};
  let successfulWalkerResponse = {};
  let notFoundResponse = {};
  let invalidParamsResponse = {};
  beforeAll(async () => {
    await truncateDatabase();
    const { id: walkerId } = await createCompleteWalker();
    const { id: ownerId } = await createCompleteOwner();
    const walkerToken = await generateToken(walkerId, 'access');
    const ownerToken = await generateToken(ownerId, 'access');
    successfulWalkerResponse = await getResponse({
      endpoint: `/users/${walkerId}`,
      method: 'get',
      headers: { authorization: walkerToken },
    });
    successfulOwnerResponse = await getResponse({
      endpoint: `/users/${ownerId}`,
      method: 'get',
      headers: { authorization: ownerToken },
    });
    notFoundResponse = await getResponse({
      endpoint: '/users/150',
      method: 'get',
      headers: { authorization: walkerToken },
    });
    invalidParamsResponse = await getResponse({
      endpoint: '/users/asd',
      method: 'get',
    });
  });
  describe('Successful owner response', () => {
    it('Should return status code 200', () => {
      expect(successfulOwnerResponse.statusCode).toEqual(200);
    });
    it('Should return the correct body', () => {
      expect(Object.keys(successfulOwnerResponse.body)).toEqual(
        expect.arrayContaining(['id', 'first_name', 'last_name', 'email', 'type', 'last_login', 'address', 'pets']),
      );
      expect(Object.keys(successfulOwnerResponse.body.address)).toEqual(
        expect.arrayContaining(['id', 'description', 'latitude', 'longitude']),
      );
      expect(Object.keys(successfulOwnerResponse.body.pets[0])).toEqual(
        expect.arrayContaining(['id', 'name', 'birth_year', 'breed', 'gender', 'weight', 'photo_uri', 'description']),
      );
    });
  });
  describe('Successful walker response', () => {
    it('Should return status code 200', () => {
      expect(successfulWalkerResponse.statusCode).toEqual(200);
    });
    it('Should return the correct body', () => {
      expect(Object.keys(successfulWalkerResponse.body)).toEqual(
        expect.arrayContaining([
          'id',
          'first_name',
          'last_name',
          'email',
          'type',
          'last_login',
          'address',
          'certifications',
          'achievements',
        ]),
      );
      expect(Object.keys(successfulWalkerResponse.body.address)).toEqual(
        expect.arrayContaining(['id', 'description', 'latitude', 'longitude']),
      );
      expect(Object.keys(successfulWalkerResponse.body.certifications[0])).toEqual(
        expect.arrayContaining(['id', 'description', 'file_uri']),
      );
      expect(Object.keys(successfulWalkerResponse.body.achievements[0])).toEqual(
        expect.arrayContaining(['id', 'description']),
      );
    });
  });
  describe('Fail for invalid request', () => {
    it('Should return status code 400', () => {
      expect(invalidParamsResponse.statusCode).toEqual(400);
    });
    it('Should return internal_code invalid_params', () => {
      expect(invalidParamsResponse.body.internal_code).toBe('invalid_params');
    });
    it('Should return an error indicating the provided authorization header is not valid', () => {
      expect(invalidParamsResponse.body.message).toContain(
        'Authorization must be a jwt token and must be contained in headers',
      );
    });
    it('Should return an error indicating the provided id is not valid', () => {
      expect(invalidParamsResponse.body.message).toContain('id must be a number and be contained in the url');
    });
  });
  describe("Fail because the user doesn't exist", () => {
    it('Should return status code 404', () => {
      expect(notFoundResponse.statusCode).toEqual(404);
    });
    it('Should return internal_code not_found', () => {
      expect(notFoundResponse.body.internal_code).toBe('not_found');
    });
    it('Should return a message indicating the provided token was generated by a non-existent user', () => {
      expect(notFoundResponse.body.message).toEqual('User not found');
    });
  });
});
